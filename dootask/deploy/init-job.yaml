apiVersion: batch/v1
kind: Job
metadata:
  name: dootask-init-job
spec:
  ttlSecondsAfterFinished: 60
  template:
    spec:
      initContainers:
      - name: wait-for-mysql
        image: mysql:8.0
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for MySQL to be ready..."
            until mysql -h $DB_HOST -u$DB_USERNAME -p$DB_PASSWORD -e "SELECT 1" >/dev/null 2>&1; do
              echo "MySQL is unavailable - sleeping"
              sleep 2
            done
            
            # 尝试创建数据库
            mysql -h $DB_HOST -u$DB_USERNAME -p$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $DB_DATABASE CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            
            echo "MySQL is up and ready!"
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_HOST
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_PASSWORD
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_DATABASE
      containers:
      - name: init
        image: kuaifan/php:swoole-8.0.rc18
        command: ["/bin/sh", "-c"]
        args:
          - |
            #[ -f "/app/success" ] && exit 0
            cd /app
            
            if [ ! -d "/app/dootask/.git" ]; then
                git clone -b pro https://github.com/kuaifan/dootask.git 
                cd dootask
                git submodule update --init --recursive
                cp .env.docker .env
                if [ ! -f "vendor/autoload.php" ]; then
                    composer config repo.packagist composer https://packagist.phpcomposer.com
                    composer install
                    composer config --unset repos.packagist
                fi
                [ -z "$(cat .env | grep "APP_KEY=" | awk -F '=' '{print $2}' | tr -d '\r\n' )" ] && php artisan key:generate
                php artisan migrate --seed
                if [ "$?" != "0" ]; then
                  sleep 10
                  php artisan migrate --seed
                fi
            else
                cd dootask
                LOCAL_COMMIT=$(git rev-parse HEAD)
                git pull
                REMOTE_COMMIT=$(git rev-parse HEAD)
                if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
                    echo "Git commit changed, updating submodules..."
                    git submodule update --init --recursive
                fi
                composer update
                php artisan migrate
            fi

            mkdir -p /app/supervisor/conf.d
            mkdir -p /app/php
            
            # 复制PHP相关文件
            cp docker/crontab/crontab.conf /app/supervisor/conf.d/
            cp docker/php/php.conf /app/supervisor/conf.d/
            cp docker/php/php.ini /app/php/
            
            # 设置权限
            # chown -R 1000:1000 /app/
            # chmod -R 775 /app/dootask/storage
            
            echo "Preparation completed successfully" >/app/success
        env:
        - name: COMPOSER_ALLOW_SUPERUSER
          value: "1"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_PORT
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_DATABASE
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_PASSWORD
        - name: DB_PREFIX
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_PREFIX
        volumeMounts:
        - name: app-data
          mountPath: /app
      - name: repassword
        image: mysql:8.0
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for MySQL to be ready..."
            until [ -f "/app/success" ]; do
              echo "MySQL is unavailable - sleeping"
              sleep 2
            done
            new_password=$DB_PASSWORD

            new_encrypt=$(date +%s%N | md5sum | awk '{print $1}' | cut -c 1-6)
            if [ -z "$new_password" ]; then
                new_password=$(date +%s%N | md5sum | awk '{print $1}' | cut -c 1-16)
            fi
            md5_password=$(echo -n `echo -n $new_password | md5sum | awk '{print $1}'`$new_encrypt | md5sum | awk '{print $1}')

            content=$(echo "select \`email\` from ${DB_PREFIX}users where \`userid\`=1;" | mysql -h $DB_HOST -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE)
            account=$(echo "$content" | sed -n '2p')

            if [ -z "$account" ]; then
                echo "错误：账号不存在！"
                exit 1
            fi

            mysql -h $DB_HOST -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE <<EOF
            update ${DB_PREFIX}users set \`encrypt\`='${new_encrypt}',\`password\`='${md5_password}' where \`userid\`=1;
            EOF

            echo "账号: admin@dootask.com"
            echo "密码: ${new_password}"
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_HOST
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_PASSWORD
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_DATABASE
        - name: DB_PREFIX
          valueFrom:
            secretKeyRef:
              name: dootask-secret
              key: DB_PREFIX
        volumeMounts:
        - name: app-data
          mountPath: /app
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: dootask-app-pvc
      restartPolicy: OnFailure

