pipeline {
  agent {
    node {
      label 'base'
    }

  }
  stages {
    stage('stage-rej3t') {
      agent none
      steps {
        echo "$params.NS,$params.APP_ID,$params.APP_KEY"
      }
    }

    stage('clone code') {
      agent none
      steps {
        input(id: 'deploy-to-dev', message: 'deploy to dev?')
        container('nodejs') {
          git(url: 'https://github.com/innet8/devops-k8s-deploy.git', credentialsId: '<no value>', branch: 'main', changelog: true, poll: false)
        }

      }
    }

    stage('deploy to dev') {
      agent none
      steps {
        container('base') {
          withCredentials([kubeconfigContent(credentialsId: 'k8s', variable: 'KUBECONFIG_CONFIG')]) {
            sh 'mkdir -p ~/.kube/'
            sh 'echo "$KUBECONFIG_CONFIG" > ~/.kube/config'
            sh '''kubectl get ns -l kubesphere.io/workspace=hitosea-test,!kubesphere.io/devopsproject|grep dootask|awk '{print $1}' |while read i; do 
kubectl -n $i apply -f dootask/deploy/init-job.yaml; 

done'''
            sh '''kubectl get ns -l 'kubesphere.io/workspace=hitosea-released,!kubesphere.io/devopsproject'|grep dootask|awk '{print $1}' |while read i; do
            kubectl wait --for=condition=complete job/dootask-init-job -n $i --timeout=600s;
kubectl rollout restart deployment/dootask-php  -n $i;
kubectl rollout restart deployment/dootask-nginx  -n $i; done'''
          }

        }

      }
    }

  }
  environment {
    DB_PASSWORD = "$params.DB_PASSWORD"
    DB_ROOT_PASSWORD = "$params.DB_ROOT_PASSWORD"
    APP_KEY = "$params.APP_KEY"
    APP_ID = "$params.APP_ID"
    NS = "$params.NS"
  }
  parameters {
    string(name: 'DB_PASSWORD', defaultValue: '', description: '')
    string(name: 'DB_ROOT_PASSWORD', defaultValue: '', description: '')
    string(name: 'APP_KEY', defaultValue: '', description: '')
    string(name: 'APP_ID', defaultValue: '', description: '')
    string(name: 'NS', defaultValue: 'dootask-demo', description: '')
  }
}